# Throughout this project, the use of data structures are not permitted 
# Minimal built in functions are to be used and the majority of functions must be
# created yourself

# More packages may be imported in the space below if approved by your instructor
import csv
import time
import sys
def printMenu():
    print('''
          Customer and Sales System\n
          1. Enter Customer Information\n
          2. Generate Customer data file\n
          3. Report on total Sales (Not done in this part)\n
          4. Check for fraud in sales data (Not done in this part)\n
          9. Quit\n
          Enter menu option (1-9)
          ''')

'''
    This function is to be edited to achieve the task.
    It is your decision to make this function a procedural or functional type
    You may place as many or as few parameters as needed
    This function may also be broken down further depending on your algorithm/approach
'''
def enterCustomerInfo():
    global first_name 
    global last_name
    global city
    global postal_code
    global credit_card_number
    print("Please input your information \n")
    first_name = input("First Name: ")
    first_name = first_name.replace(" ", "")
    last_name = input("Last Name: ")
    last_name = last_name.replace(" ", "")
    city = input("City: ")
    postal_code = input("Postal Code: ")
    postal_code = postal_code.replace(" ", "")
    postal_code = postal_code.replace("-", "")
    credit_card_number = input("Credit Card Number: ")
    credit_card_number = credit_card_number.replace(" ", "")
    print("Validating Credit Card Number", end="")
    for _ in range(5):
       time.sleep(0.5) 
       print(".", end="")
       sys.stdout.flush()
    if validateCreditCard(credit_card_number):
        print("\nSuccess! Credit Card is Valid")
    else:
        print("\nCredit Card Invalid")

    print("Validating Postal Code", end="")
    for _ in range(5):
       time.sleep(0.5) 
       print(".", end="")
       sys.stdout.flush()
    if validatePostalCode(postal_code):
        print("\nSuccess! Postal Code is Valid")
    else:
        print("\nPostal Code is Invalid...")
    if validatePostalCode(postal_code) and validateCreditCard(credit_card_number):
        print("All information is valid")
        time.sleep(2)
    else:
        time.sleep(2)
        print("Invalid Information please try again \n")
        time.sleep(2)
        enterCustomerInfo()


    

'''
    This function is to be edited to achieve the task.
    It is your decision to make this function a procedural or functional type
    You may place as many or as few parameters as needed
    This function may also be broken down further depending on your algorithm/approach
'''
def validatePostalCode(postal_code):
    if len(postal_code) >= 3 and len(postal_code) <= 6:
        if postal_code[0].isalpha() and postal_code[1].isdigit() and postal_code[2].isalpha() and postal_code[0].upper() in "ABCEGHJKLMNPRSTVWXYZ": 
            with open("postal_codes.csv", mode='r', newline='', encoding='latin1') as file:
                for row in csv.reader(file, delimiter='|'):
                    if row[0] in postal_code:
                        return True     
                return False
    else: 
        return False


'''
    This function is to be edited to achieve the task.
    It is your decision to make this function a procedural or functional type
    You may place as many or as few parameters as needed
    This function may also be broken down further depending on your algorithm/approach
'''
def validateCreditCard(credit_card_number):
    try:
        if credit_card_number == int(credit_card_number):
            pass
    except ValueError:
        return False
    credit_card_number = list(credit_card_number)
    credit_card_number.reverse()
    length_card = len(credit_card_number)
    if int(length_card) < 9:
        return False
    for i in range(length_card):
        if i % 2 != 0:
            doubled = int(credit_card_number[i]) * 2
            if doubled >= 10:
                doubled = str(doubled)
                doubled = list(doubled)
                doubled = int(doubled[0]) + int(doubled[1])
                credit_card_number[i] = str(doubled)
            else:
                credit_card_number[i] = str(doubled)
    for i in range(length_card):
        credit_card_number[i] = int(credit_card_number[i])
    total = str(sum(credit_card_number))
    total = list(total)
    return total[-1] == "0"


        


'''
    This function is to be edited to achieve the task.
    It is your decision to make this function a procedural or functional type
    You may place as many or as few parameters as needed
    This function may also be broken down further depending on your algorithm/approach
'''

def generateCustomerDataFile():
    global first_name 
    global last_name
    global city
    global postal_code
    global credit_card_number
    line = ""
    print("Generating Customer Data please wait", end="")
    for _ in range(5):
       time.sleep(0.5) 
       print(".", end="")
       sys.stdout.flush()
    try:
        with open("customer_data.csv", 'r', newline='') as datafile:
            csv_reader = csv.reader(datafile,  delimiter='|')
            for row in csv_reader:
                pass
            if row:
                line = int(row[0]) + 1
        with open("customer_data.csv", 'r', newline='', encoding='latin1') as file:
            for row in csv.reader(file, delimiter='|'):
                if row[1] == (" " + first_name + " " + last_name + " "):
                    print("Hello, " + first_name + " you're information is already in our database")
                    return print("|".join(row))
                if row[-1] == credit_card_number:
                    return print("This Credit Card is already in use by" + row[1])
        with open('customer_data.csv', 'a', newline='') as datafile:
            datafile.write(str(line) + " | " + first_name + " " + last_name + " | " + city + " " + postal_code + " |" + credit_card_number + "\n")
    except FileNotFoundError:
        with open('customer_data.csv', 'w', newline='') as datafile:
            datafile.write("1" + " | " + first_name + " " + last_name + " | " + city + ", " + postal_code + " |" + credit_card_number + "\n")
    print("\n" + first_name + " your information was successfully added to the Customer Data list")
    time.sleep(1)

####################################################################
#       ADDITIONAL METHODS MAY BE ADDED BELOW IF NECESSARY         #
####################################################################




####################################################################
#                            MAIN PROGRAM                          #
#           DO NOT EDIT ANY CODE EXCEPT WHERE INDICATED            #
####################################################################

# Do not edit any of these variables
userInput = ""
enterCustomerOption = "1"
generateCustomerOption = "2"
exitCondition = "9"

# More variables for the main may be declared in the space below

information = 0
while userInput != exitCondition:
    printMenu()                 # Printing out the main menu
    userInput = input(" ")       # User selection from the menu


    if userInput == enterCustomerOption:
        information = 1
        # Only the line below may be edited based on the parameter list and how you design the method return
        # Any necessary variables may be added to this if section, but nowhere else in the code
        enterCustomerInfo()

    elif userInput == generateCustomerOption: 
        # Only the line below may be edited based on the parameter list and how you design the method return
        if information != 0:
            generateCustomerDataFile()
            information = 0
        else:
            print("Please input your information first")

    else:
        print("Please type in a valid option (A number from 1-9)")

#Exits once the user types 
print("Program Terminated")
